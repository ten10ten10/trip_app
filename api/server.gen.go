// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /login)
	LoginUser(ctx echo.Context) error

	// (POST /logout)
	LogoutUser(ctx echo.Context) error

	// (GET /me)
	GetMe(ctx echo.Context) error

	// (PUT /me/password)
	ChangePassword(ctx echo.Context) error

	// (GET /public/trips/{shareToken})
	GetPublicTripByShareToken(ctx echo.Context, shareToken ShareToken) error

	// (PUT /public/trips/{shareToken})
	UpdatePublicTripByShareToken(ctx echo.Context, shareToken ShareToken) error

	// (GET /public/trips/{shareToken}/details)
	GetTripDetails(ctx echo.Context, shareToken ShareToken) error

	// (GET /public/trips/{shareToken}/schedules)
	GetSchedulesForPublicTrip(ctx echo.Context, shareToken ShareToken) error

	// (POST /public/trips/{shareToken}/schedules)
	AddScheduleToPublicTrip(ctx echo.Context, shareToken ShareToken) error

	// (DELETE /public/trips/{shareToken}/schedules/{scheduleId})
	DeleteScheduleForPublicTrip(ctx echo.Context, shareToken ShareToken, scheduleId ScheduleId) error

	// (GET /public/trips/{shareToken}/schedules/{scheduleId})
	GetScheduleForPublicTrip(ctx echo.Context, shareToken ShareToken, scheduleId ScheduleId) error

	// (PATCH /public/trips/{shareToken}/schedules/{scheduleId})
	UpdateScheduleForPublicTrip(ctx echo.Context, shareToken ShareToken, scheduleId ScheduleId) error

	// (POST /signup)
	CreateUser(ctx echo.Context) error

	// (GET /trips)
	GetUserTrips(ctx echo.Context) error

	// (POST /trips)
	CreateUserTrip(ctx echo.Context) error

	// (DELETE /trips/{tripId})
	DeleteUserTrip(ctx echo.Context, tripId TripId) error

	// (GET /trips/{tripId})
	GetUserTrip(ctx echo.Context, tripId TripId) error

	// (PUT /trips/{tripId})
	UpdateUserTrip(ctx echo.Context, tripId TripId) error

	// (GET /trips/{tripId}/details)
	GetTripDetails(ctx echo.Context, tripId TripId) error

	// (GET /trips/{tripId}/schedules)
	GetSchedulesForTrip(ctx echo.Context, tripId TripId) error

	// (POST /trips/{tripId}/schedules)
	AddScheduleToTrip(ctx echo.Context, tripId TripId) error

	// (DELETE /trips/{tripId}/schedules/{scheduleId})
	DeleteScheduleForTrip(ctx echo.Context, tripId TripId, scheduleId ScheduleId) error

	// (GET /trips/{tripId}/schedules/{scheduleId})
	GetScheduleForTrip(ctx echo.Context, tripId TripId, scheduleId ScheduleId) error

	// (PATCH /trips/{tripId}/schedules/{scheduleId})
	UpdateScheduleForTrip(ctx echo.Context, tripId TripId, scheduleId ScheduleId) error

	// (GET /trips/{tripId}/share)
	GetShareLinkForTrip(ctx echo.Context, tripId TripId) error

	// (POST /trips/{tripId}/share)
	CreateShareLinkForTrip(ctx echo.Context, tripId TripId) error

	// (POST /users/verify/{verificationToken})
	VerifyUser(ctx echo.Context, verificationToken string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LoginUser converts echo context to params.
func (w *ServerInterfaceWrapper) LoginUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LoginUser(ctx)
	return err
}

// LogoutUser converts echo context to params.
func (w *ServerInterfaceWrapper) LogoutUser(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogoutUser(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// ChangePassword converts echo context to params.
func (w *ServerInterfaceWrapper) ChangePassword(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangePassword(ctx)
	return err
}

// GetPublicTripByShareToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetPublicTripByShareToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPublicTripByShareToken(ctx, shareToken)
	return err
}

// UpdatePublicTripByShareToken converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePublicTripByShareToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePublicTripByShareToken(ctx, shareToken)
	return err
}

// GetTripDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTripDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTripDetails(ctx, shareToken)
	return err
}

// GetSchedulesForPublicTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesForPublicTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesForPublicTrip(ctx, shareToken)
	return err
}

// AddScheduleToPublicTrip converts echo context to params.
func (w *ServerInterfaceWrapper) AddScheduleToPublicTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddScheduleToPublicTrip(ctx, shareToken)
	return err
}

// DeleteScheduleForPublicTrip converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScheduleForPublicTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScheduleForPublicTrip(ctx, shareToken, scheduleId)
	return err
}

// GetScheduleForPublicTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetScheduleForPublicTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScheduleForPublicTrip(ctx, shareToken, scheduleId)
	return err
}

// UpdateScheduleForPublicTrip converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateScheduleForPublicTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareToken" -------------
	var shareToken ShareToken

	err = runtime.BindStyledParameterWithOptions("simple", "shareToken", ctx.Param("shareToken"), &shareToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareToken: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateScheduleForPublicTrip(ctx, shareToken, scheduleId)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUserTrips converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTrips(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTrips(ctx)
	return err
}

// CreateUserTrip converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUserTrip(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUserTrip(ctx)
	return err
}

// DeleteUserTrip converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserTrip(ctx, tripId)
	return err
}

// GetUserTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTrip(ctx, tripId)
	return err
}

// UpdateUserTrip converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserTrip(ctx, tripId)
	return err
}

// GetTripDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetTripDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTripDetails(ctx, tripId)
	return err
}

// GetSchedulesForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesForTrip(ctx, tripId)
	return err
}

// AddScheduleToTrip converts echo context to params.
func (w *ServerInterfaceWrapper) AddScheduleToTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddScheduleToTrip(ctx, tripId)
	return err
}

// DeleteScheduleForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteScheduleForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteScheduleForTrip(ctx, tripId, scheduleId)
	return err
}

// GetScheduleForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetScheduleForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetScheduleForTrip(ctx, tripId, scheduleId)
	return err
}

// UpdateScheduleForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateScheduleForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId ScheduleId

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", ctx.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scheduleId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateScheduleForTrip(ctx, tripId, scheduleId)
	return err
}

// GetShareLinkForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) GetShareLinkForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShareLinkForTrip(ctx, tripId)
	return err
}

// CreateShareLinkForTrip converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShareLinkForTrip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tripId" -------------
	var tripId TripId

	err = runtime.BindStyledParameterWithOptions("simple", "tripId", ctx.Param("tripId"), &tripId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tripId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateShareLinkForTrip(ctx, tripId)
	return err
}

// VerifyUser converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "verificationToken" -------------
	var verificationToken string

	err = runtime.BindStyledParameterWithOptions("simple", "verificationToken", ctx.Param("verificationToken"), &verificationToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verificationToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyUser(ctx, verificationToken)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/login", wrapper.LoginUser)
	router.POST(baseURL+"/logout", wrapper.LogoutUser)
	router.GET(baseURL+"/me", wrapper.GetMe)
	router.PUT(baseURL+"/me/password", wrapper.ChangePassword)
	router.GET(baseURL+"/public/trips/:shareToken", wrapper.GetPublicTripByShareToken)
	router.PUT(baseURL+"/public/trips/:shareToken", wrapper.UpdatePublicTripByShareToken)
	router.GET(baseURL+"/public/trips/:shareToken/details", wrapper.GetTripDetails)
	router.GET(baseURL+"/public/trips/:shareToken/schedules", wrapper.GetSchedulesForPublicTrip)
	router.POST(baseURL+"/public/trips/:shareToken/schedules", wrapper.AddScheduleToPublicTrip)
	router.DELETE(baseURL+"/public/trips/:shareToken/schedules/:scheduleId", wrapper.DeleteScheduleForPublicTrip)
	router.GET(baseURL+"/public/trips/:shareToken/schedules/:scheduleId", wrapper.GetScheduleForPublicTrip)
	router.PATCH(baseURL+"/public/trips/:shareToken/schedules/:scheduleId", wrapper.UpdateScheduleForPublicTrip)
	router.POST(baseURL+"/signup", wrapper.CreateUser)
	router.GET(baseURL+"/trips", wrapper.GetUserTrips)
	router.POST(baseURL+"/trips", wrapper.CreateUserTrip)
	router.DELETE(baseURL+"/trips/:tripId", wrapper.DeleteUserTrip)
	router.GET(baseURL+"/trips/:tripId", wrapper.GetUserTrip)
	router.PUT(baseURL+"/trips/:tripId", wrapper.UpdateUserTrip)
	router.GET(baseURL+"/trips/:tripId/details", wrapper.GetTripDetails)
	router.GET(baseURL+"/trips/:tripId/schedules", wrapper.GetSchedulesForTrip)
	router.POST(baseURL+"/trips/:tripId/schedules", wrapper.AddScheduleToTrip)
	router.DELETE(baseURL+"/trips/:tripId/schedules/:scheduleId", wrapper.DeleteScheduleForTrip)
	router.GET(baseURL+"/trips/:tripId/schedules/:scheduleId", wrapper.GetScheduleForTrip)
	router.PATCH(baseURL+"/trips/:tripId/schedules/:scheduleId", wrapper.UpdateScheduleForTrip)
	router.GET(baseURL+"/trips/:tripId/share", wrapper.GetShareLinkForTrip)
	router.POST(baseURL+"/trips/:tripId/share", wrapper.CreateShareLinkForTrip)
	router.POST(baseURL+"/users/verify/:verificationToken", wrapper.VerifyUser)

}
